//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IRRM.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class IRRMEntities : DbContext
    {
        public IRRMEntities()
            : base("name=IRRMEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AnswerType_SM> AnswerType_SM { get; set; }
        public virtual DbSet<Branch_M> Branch_M { get; set; }
        public virtual DbSet<Department_M> Department_M { get; set; }
        public virtual DbSet<Department_M2> Department_M2 { get; set; }
        public virtual DbSet<DocumentAccessGroup_M> DocumentAccessGroup_M { get; set; }
        public virtual DbSet<DocumentCategory_M> DocumentCategory_M { get; set; }
        public virtual DbSet<DocumentStakeholder_M> DocumentStakeholder_M { get; set; }
        public virtual DbSet<DocumentStatus_SM> DocumentStatus_SM { get; set; }
        public virtual DbSet<DocumentStatus_T> DocumentStatus_T { get; set; }
        public virtual DbSet<DocumentSubCategory_M> DocumentSubCategory_M { get; set; }
        public virtual DbSet<DynamicControl> DynamicControls { get; set; }
        public virtual DbSet<DynamicControlType> DynamicControlTypes { get; set; }
        public virtual DbSet<DynamicControlValue> DynamicControlValues { get; set; }
        public virtual DbSet<DynamicForm> DynamicForms { get; set; }
        public virtual DbSet<DynamicForm_Control> DynamicForm_Control { get; set; }
        public virtual DbSet<DynamicReports_M> DynamicReports_M { get; set; }
        public virtual DbSet<EventType_SM> EventType_SM { get; set; }
        public virtual DbSet<Incident_Comments> Incident_Comments { get; set; }
        public virtual DbSet<Incident_Status_T> Incident_Status_T { get; set; }
        public virtual DbSet<IncidentDocument_T> IncidentDocument_T { get; set; }
        public virtual DbSet<IncidentFeedbackType_M> IncidentFeedbackType_M { get; set; }
        public virtual DbSet<IncidentHarmGroup_M> IncidentHarmGroup_M { get; set; }
        public virtual DbSet<IncidentHarmScore_M> IncidentHarmScore_M { get; set; }
        public virtual DbSet<IncidentHistory> IncidentHistories { get; set; }
        public virtual DbSet<Incident_Interview_T> Incident_Interview_T { get; set; }
        public virtual DbSet<IncidentMainOutcome_M> IncidentMainOutcome_M { get; set; }
        public virtual DbSet<IncidentMainRootCause_M> IncidentMainRootCause_M { get; set; }
        public virtual DbSet<Incident_People_T> Incident_People_T { get; set; }
        public virtual DbSet<IncidentPeopleInvolved_M> IncidentPeopleInvolved_M { get; set; }
        public virtual DbSet<IncidentPriorities_M> IncidentPriorities_M { get; set; }
        public virtual DbSet<Incident_Recommendation_T> Incident_Recommendation_T { get; set; }
        public virtual DbSet<IncidentRegistery_T> IncidentRegistery_T { get; set; }
        public virtual DbSet<IncidentRelation_M> IncidentRelation_M { get; set; }
        public virtual DbSet<Incident> Incidents { get; set; }
        public virtual DbSet<Incidents_MainOutcome_T> Incidents_MainOutcome_T { get; set; }
        public virtual DbSet<Incidents_MainRootCause_T> Incidents_MainRootCause_T { get; set; }
        public virtual DbSet<IncidentStatus_M> IncidentStatus_M { get; set; }
        public virtual DbSet<IncidentSubOutcome_M> IncidentSubOutcome_M { get; set; }
        public virtual DbSet<IncidentSubOutcomeAnswer_T> IncidentSubOutcomeAnswer_T { get; set; }
        public virtual DbSet<IncidentSubOutcomeAnswerChoice_T> IncidentSubOutcomeAnswerChoice_T { get; set; }
        public virtual DbSet<IncidentSubRootCause_M> IncidentSubRootCause_M { get; set; }
        public virtual DbSet<IncidentSubRootCauseAnswer_T> IncidentSubRootCauseAnswer_T { get; set; }
        public virtual DbSet<IncidentSubRootCauseAnswerChoice_T> IncidentSubRootCauseAnswerChoice_T { get; set; }
        public virtual DbSet<IncidentSubTypes_M> IncidentSubTypes_M { get; set; }
        public virtual DbSet<IncidentTypes_M> IncidentTypes_M { get; set; }
        public virtual DbSet<Location_M> Location_M { get; set; }
        public virtual DbSet<Log> Logs { get; set; }
        public virtual DbSet<RiskCategory_M> RiskCategory_M { get; set; }
        public virtual DbSet<RiskCost_M> RiskCost_M { get; set; }
        public virtual DbSet<RiskDescriptor_M> RiskDescriptor_M { get; set; }
        public virtual DbSet<RiskFrequencyScore_M> RiskFrequencyScore_M { get; set; }
        public virtual DbSet<RiskKeyStatus_T> RiskKeyStatus_T { get; set; }
        public virtual DbSet<RiskKeyStatusDates_T> RiskKeyStatusDates_T { get; set; }
        public virtual DbSet<RiskLevel_M> RiskLevel_M { get; set; }
        public virtual DbSet<RiskLevel_M2> RiskLevel_M2 { get; set; }
        public virtual DbSet<RiskProbability_M> RiskProbability_M { get; set; }
        public virtual DbSet<RiskScore_M> RiskScore_M { get; set; }
        public virtual DbSet<RiskSeverity_M> RiskSeverity_M { get; set; }
        public virtual DbSet<RiskStatus_M> RiskStatus_M { get; set; }
        public virtual DbSet<RiskStrategy_M> RiskStrategy_M { get; set; }
        public virtual DbSet<RiskTemplate_M> RiskTemplate_M { get; set; }
        public virtual DbSet<Task_Comments> Task_Comments { get; set; }
        public virtual DbSet<Task_T> Task_T { get; set; }
        public virtual DbSet<TaskCategory_M> TaskCategory_M { get; set; }
        public virtual DbSet<Task_People_T> Task_People_T { get; set; }
        public virtual DbSet<TaskPeopleInvolved_M> TaskPeopleInvolved_M { get; set; }
        public virtual DbSet<TaskPriorities_M> TaskPriorities_M { get; set; }
        public virtual DbSet<TaskRelation_M> TaskRelation_M { get; set; }
        public virtual DbSet<Task> Tasks { get; set; }
        public virtual DbSet<TaskStatus_M> TaskStatus_M { get; set; }
        public virtual DbSet<Task_Status_T> Task_Status_T { get; set; }
        public virtual DbSet<TemplateCategory_M> TemplateCategory_M { get; set; }
        public virtual DbSet<UserRole_SM> UserRole_SM { get; set; }
        public virtual DbSet<Users_M> Users_M { get; set; }
        public virtual DbSet<PeopleUser_V> PeopleUser_V { get; set; }
        public virtual DbSet<TaskComment_V> TaskComment_V { get; set; }
        public virtual DbSet<TaskIndex_V> TaskIndex_V { get; set; }
        public virtual DbSet<TaskStatusUser_V> TaskStatusUser_V { get; set; }
        public virtual DbSet<DocumentType_SM> DocumentType_SM { get; set; }
        public virtual DbSet<RiskAssessors_T> RiskAssessors_T { get; set; }
        public virtual DbSet<RiskAssessorUser_V> RiskAssessorUser_V { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<DocumentCopyLocation_T> DocumentCopyLocation_T { get; set; }
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<DocumentCopyDept_V> DocumentCopyDept_V { get; set; }
        public virtual DbSet<DocumentAccess_T> DocumentAccess_T { get; set; }
        public virtual DbSet<DocumentViewers_V> DocumentViewers_V { get; set; }
        public virtual DbSet<DocumentViewers_T> DocumentViewers_T { get; set; }
        public virtual DbSet<DocumentAccessGroupUsers_V> DocumentAccessGroupUsers_V { get; set; }
        public virtual DbSet<Documents_V> Documents_V { get; set; }
        public virtual DbSet<TaskSubCategory_M> TaskSubCategory_M { get; set; }
        public virtual DbSet<TaskDocument_T> TaskDocument_T { get; set; }
        public virtual DbSet<RiskRegister> RiskRegisters { get; set; }
    
        public virtual ObjectResult<string> RegistryNo(string prefix)
        {
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("RegistryNo", prefixParameter);
        }
    
        public virtual int spEventIncidentCountreport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> rptType)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var rptTypeParameter = rptType.HasValue ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEventIncidentCountreport", fromDateParameter, toDateParameter, rptTypeParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
